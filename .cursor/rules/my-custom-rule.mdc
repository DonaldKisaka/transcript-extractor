---
description: 
globs: *.tsx
alwaysApply: false
---
# Transcript Extraction Web Application - Cursor Rules

## Project Overview
This is a web application for bulk extracting and managing transcripts from video conferencing platforms (Zoom, Microsoft Teams, Google Meet). Focus on clean UI, batch processing, and secure data handling.

## Technology Stack & Architecture
- Use React 18+ with TypeScript for frontend
- Use Next.js 14+ with App Router for full-stack capabilities
- Use Tailwind CSS for styling with shadcn/ui components
- Use Supabase as backend-as-a-service (database, auth, storage, edge functions)
- Use Supabase Auth for authentication and user management
- Use Supabase Database (PostgreSQL) with Row Level Security (RLS)
- Use Supabase Storage for file uploads and transcript storage
- Use Supabase Edge Functions for transcript processing workflows
- Use Zustand for client-side state management
- Use React Query (TanStack Query) for server state management
- Use Zod for runtime validation and TypeScript schema generation

## Code Style & Patterns
- Write all new code in TypeScript with strict type checking
- Use functional components with React hooks exclusively
- Prefer named exports over default exports
- Use kebab-case for file and folder names
- Use camelCase for variables and functions
- Use PascalCase for components and types
- Use SCREAMING_SNAKE_CASE for constants and environment variables

## File Structure & Organization
- Place reusable components in `/components/ui/` using shadcn/ui patterns
- Create feature-specific components in `/components/features/`
- Use `/lib/` for utility functions, configurations, and Supabase client setup
- Place API routes in `/app/api/` for server-side operations not handled by Supabase
- Store types in `/types/` with descriptive names matching Supabase table schemas
- Use `/hooks/` for custom React hooks and Supabase query hooks
- Place constants in `/constants/` files
- Store Supabase queries and mutations in `/lib/supabase/` organized by feature

## Component Guidelines
- Create small, focused components with single responsibilities
- Use composition over inheritance
- Implement proper error boundaries for file upload and processing operations
- Use React.memo() for components that receive stable props
- Implement proper loading and error states for all async operations
- Use React Hook Form with Zod validation for all forms

## API & Data Handling
- Use Supabase JavaScript client for all database operations
- Create reusable query functions using React Query with Supabase
- Implement proper error handling with Supabase error types
- Use Supabase real-time subscriptions for live updates on processing status
- Implement optimistic updates with React Query mutations
- Use Supabase Storage API for file uploads with resumable uploads
- Validate all inputs with Zod schemas matching Supabase table definitions
- Use Supabase Edge Functions for heavy processing tasks
- Implement proper pagination with Supabase's range queries

## Authentication & Security
- Use Supabase Auth with multiple providers (Google, GitHub, email/password)
- Implement Row Level Security (RLS) policies for all database tables
- Use Supabase session management with automatic token refresh
- Implement rate limiting using Supabase Edge Functions
- Sanitize all user inputs and validate file types before upload
- Use Supabase's built-in security features (JWT validation, user roles)
- Configure proper CORS policies in Supabase dashboard
- Use Supabase's user metadata for storing additional profile information

## File Upload & Processing
- Use React Dropzone for drag-and-drop file uploads
- Implement resumable uploads using Supabase Storage with chunking
- Store file metadata in Supabase database with foreign key relationships
- Show real-time progress using Supabase real-time subscriptions
- Support multiple file formats (.mp4, .m4a, .wav, .zoom, .teams)
- Validate file types and sizes using Supabase Storage policies
- Use Supabase Edge Functions for file processing and transcript extraction
- Implement file cleanup policies using Supabase Storage lifecycle rules

## Platform-Specific Features
- Create separate extraction services for each platform (Zoom, Teams, Meet)
- Use factory pattern for platform-specific transcript processors
- Implement platform detection based on file metadata
- Handle platform-specific timestamp formats and speaker identification
- Support platform-specific metadata extraction (meeting ID, participants, etc.)

## Batch Processing
- Use Supabase Edge Functions for transcript extraction workflows
- Implement job queuing using Supabase database tables with status tracking
- Use Supabase real-time subscriptions for live processing updates
- Create database triggers for automatic job status updates
- Use Supabase cron jobs for scheduled cleanup and maintenance tasks
- Implement retry logic using database functions and triggers
- Store processing logs in dedicated Supabase tables for debugging

## Search & Export Functionality
- Use Supabase's full-text search capabilities with PostgreSQL
- Implement search using `to_tsvector` and `to_tsquery` for transcript content
- Create database indexes for optimized search performance
- Support advanced search filters using Supabase query builders
- Use Supabase Edge Functions for export processing (TXT, SRT, JSON, PDF)
- Implement streaming downloads through Supabase Storage signed URLs
- Store search preferences in user metadata using Supabase Auth

## UI/UX Guidelines
- Use consistent spacing with Tailwind's spacing scale
- Implement dark/light mode toggle with proper theme persistence
- Use consistent color scheme with CSS custom properties
- Create responsive design that works on mobile devices
- Implement proper focus management for accessibility
- Use loading skeletons instead of spinners for better perceived performance
- Show clear success/error feedback for all user actions

## Testing
- Write unit tests for utility functions using Jest
- Create integration tests for API endpoints
- Use React Testing Library for component tests
- Test file upload and processing workflows end-to-end
- Mock external services in tests
- Maintain test coverage above 80%
- Write tests first, then the code, then run the tests and update the code until tests pass.

## Performance Optimization
- Implement lazy loading for transcript lists using Supabase pagination
- Use React.Suspense for code splitting
- Optimize images and use Next.js Image component
- Leverage Supabase's built-in caching for repeated queries
- Use Supabase database indexes for search and filtering operations
- Implement CDN through Supabase Storage for static assets
- Use Supabase Edge Functions at edge locations for reduced latency

## Error Handling & Monitoring
- Use Supabase's built-in error logging and monitoring
- Create comprehensive error handling for Supabase client operations
- Implement user-friendly error messages for Supabase auth and database errors
- Use error boundaries to prevent app crashes during Supabase operations
- Log processing errors in Supabase tables with structured data
- Use Supabase's monitoring dashboard for performance insights
- Set up Supabase webhooks for critical error notifications
- Implement health checks for Supabase connection status

## Supabase-Specific Guidelines
- Always use TypeScript types generated from Supabase schemas
- Create custom hooks for common Supabase operations (useAuth, useTranscripts)
- Use Supabase's built-in email templates for authentication flows
- Implement proper cleanup of Supabase subscriptions in useEffect
- Use Supabase's policy templates for common RLS patterns
- Follow Supabase naming conventions for tables and columns (snake_case)
- Use Supabase's built-in user roles and permissions system

- Leverage Supabase's automatic API generation for CRUD operations